{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","id","v1","word","translate","overturned","cards","setCards","setWord","setTranslate","className","type","placeholder","value","onChange","e","currentTarget","onClick","newCard","map","card","turnCards","el","turnCard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAwGeA,MA7Ff,WAAgB,IAAD,EACYC,mBAAqB,CAC9C,CACCC,GAAIC,eACJC,KAAM,QACNC,UAAW,uCACXC,YAAY,KANA,mBACPC,EADO,KACAC,EADA,OAUUP,mBAAiB,IAV3B,mBAUPG,EAVO,KAUDK,EAVC,OAWoBR,mBAAiB,IAXrC,mBAWPI,EAXO,KAWIK,EAXJ,KAyDd,OACC,sBAAKC,UAAU,MAAf,UACC,oDACA,sBAAKA,UAAU,YAAf,UACC,uBACCC,KAAK,OACLC,YAAY,OACZC,MAAOV,EACPW,SAvCe,SAACC,GACnBP,EAAQO,EAAEC,cAAcH,UAwCtB,uBACCF,KAAK,OACLC,YAAY,YACZC,MAAOT,EACPU,SAzCoB,SAACC,GACxBN,EAAaM,EAAEC,cAAcH,UA0C3B,wBAAQI,QAvCY,WACtB,IAAMC,EAAoB,CAAEjB,GAAIC,eAAMC,KAAMA,EAAMC,UAAWA,GAC7DG,EAAS,GAAD,mBAAKD,GAAL,CAAYY,KACpBV,EAAQ,IACRC,EAAa,KAmCX,iBAEA,8BACEH,EAAMa,KAAI,SAACC,GACX,OACC,qBAECV,UAAW,QAAUU,EAAKf,WAAa,cAAgB,IACvDY,QAAS,kBAxCC,SAAChB,GACjB,IAAMoB,EAAS,YAAOf,GAEtBC,EACCc,EAAUF,KAAI,SAACG,GAAD,OACbA,EAAGrB,KAAOA,EAAV,2BAAoBqB,GAApB,IAAwBjB,YAAaiB,EAAGjB,aAAeiB,MAmCpCC,CAASH,EAAKnB,KAH9B,SAKEmB,EAAKf,WAAae,EAAKhB,UAAYgB,EAAKjB,MAJpCiB,EAAKnB,gBC5EHuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.26a1bf3f.chunk.js","sourcesContent":["import React, { ChangeEvent, useEffect, useState } from \"react\"\nimport \"./App.css\"\nimport { v1 } from \"uuid\"\n\nexport type CardType = {\n\tid: string\n\tword: string\n\ttranslate: string\n\toverturned?: boolean\n}\n\nfunction App() {\n\tconst [cards, setCards] = useState<CardType[]>([\n\t\t{\n\t\t\tid: v1(),\n\t\t\tword: \"hello\",\n\t\t\ttranslate: \"привет\",\n\t\t\toverturned: false,\n\t\t},\n\t])\n\n\tconst [word, setWord] = useState<string>(\"\")\n\tconst [translate, setTranslate] = useState<string>(\"\")\n\n\t// useEffect(() => {\n\t// \tlocalStorage.setItem(\"card\", JSON.stringify(cards))\n\t// }, [cards]\n\t// )\n\t// useEffect(() => {\n\t// \tlet learnCards = localStorage.getItem(\"card\")\n\t// \tif(learnCards){\n\t// \t\tlet newValue=JSON.parse(learnCards)\n\t// \t\tsetCards(newValue)\n\t// \t}\n\t// }, []\n\t// )\n\n\tconst createWord = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetWord(e.currentTarget.value)\n\t}\n\n\tconst createTranslate = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetTranslate(e.currentTarget.value)\n\t}\n\n\tconst addCardHandler = () => {\n\t\tconst newCard: CardType = { id: v1(), word: word, translate: translate }\n\t\tsetCards([...cards, newCard])\n\t\tsetWord(\"\")\n\t\tsetTranslate(\"\")\n\t}\n\n\tconst turnCard = (id: string) => {\n\t\tconst turnCards = [...cards]\n\n\t\tsetCards(\n\t\t\tturnCards.map((el) =>\n\t\t\t\tel.id === id ? { ...el, overturned: !el.overturned } : el\n\t\t\t)\n\t\t)\n\t}\n\n\t// const setToLocalStorageHandler = () => {}\n\t// const getFromLocalStorageHandler = () => {\n\t// \tlet learnCards = localStorage.getItem(\"card\")\n\t// }\n\t\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<h2>English word cards</h2>\n\t\t\t<div className='container'>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tplaceholder='word'\n\t\t\t\t\tvalue={word}\n\t\t\t\t\tonChange={createWord}\n\t\t\t\t/>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tplaceholder='translate'\n\t\t\t\t\tvalue={translate}\n\t\t\t\t\tonChange={createTranslate}\n\t\t\t\t/>\n\t\t\t\t<button onClick={addCardHandler}>add</button>\n\n\t\t\t\t<div>\n\t\t\t\t\t{cards.map((card) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\t\t\tclassName={\"card\" + (card.overturned ? \" overturned\" : \"\")}\n\t\t\t\t\t\t\t\tonClick={() => turnCard(card.id)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{card.overturned ? card.translate : card.word}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}